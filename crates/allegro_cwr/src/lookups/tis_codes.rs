//! TIS (Territory Information System) numeric codes lookup table
//! Based on ISO 3166-1 numeric country codes

use once_cell::sync::Lazy;
use std::collections::HashMap;

/// TIS numeric codes mapping (ISO 3166-1 numeric country codes)
pub static TIS_CODES: Lazy<HashMap<u16, &'static str>> = Lazy::new(|| {
    let mut m = HashMap::new();
    m.insert(4, "Afghanistan");
    m.insert(8, "Albania");
    m.insert(12, "Algeria");
    m.insert(16, "American Samoa");
    m.insert(20, "Andorra");
    m.insert(24, "Angola");
    m.insert(28, "Antigua and Barbuda");
    m.insert(32, "Argentina");
    m.insert(36, "Australia");
    m.insert(40, "Austria");
    m.insert(44, "Bahamas");
    m.insert(48, "Bahrain");
    m.insert(50, "Bangladesh");
    m.insert(52, "Barbados");
    m.insert(56, "Belgium");
    m.insert(60, "Bermuda");
    m.insert(64, "Bhutan");
    m.insert(68, "Bolivia");
    m.insert(70, "Bosnia and Herzegovina");
    m.insert(72, "Botswana");
    m.insert(76, "Brazil");
    m.insert(84, "Belize");
    m.insert(90, "Solomon Islands");
    m.insert(92, "Virgin Islands (British)");
    m.insert(96, "Brunei Darussalam");
    m.insert(100, "Bulgaria");
    m.insert(104, "Myanmar");
    m.insert(108, "Burundi");
    m.insert(112, "Belarus");
    m.insert(116, "Cambodia");
    m.insert(120, "Cameroon");
    m.insert(124, "Canada");
    m.insert(132, "Cape Verde");
    m.insert(136, "Cayman Islands");
    m.insert(140, "Central African Republic");
    m.insert(144, "Sri Lanka");
    m.insert(148, "Chad");
    m.insert(152, "Chile");
    m.insert(156, "China");
    m.insert(158, "Taiwan");
    m.insert(162, "Christmas Island");
    m.insert(166, "Cocos (Keeling) Islands");
    m.insert(170, "Colombia");
    m.insert(174, "Comoros");
    m.insert(175, "Mayotte");
    m.insert(178, "Congo");
    m.insert(180, "Congo, Democratic Republic of the");
    m.insert(184, "Cook Islands");
    m.insert(188, "Costa Rica");
    m.insert(191, "Croatia");
    m.insert(192, "Cuba");
    m.insert(196, "Cyprus");
    m.insert(203, "Czech Republic");
    m.insert(204, "Benin");
    m.insert(208, "Denmark");
    m.insert(212, "Dominica");
    m.insert(214, "Dominican Republic");
    m.insert(218, "Ecuador");
    m.insert(222, "El Salvador");
    m.insert(226, "Equatorial Guinea");
    m.insert(231, "Ethiopia");
    m.insert(232, "Eritrea");
    m.insert(233, "Estonia");
    m.insert(234, "Faroe Islands");
    m.insert(238, "Falkland Islands (Malvinas)");
    m.insert(242, "Fiji");
    m.insert(246, "Finland");
    m.insert(250, "France");
    m.insert(254, "French Guiana");
    m.insert(258, "French Polynesia");
    m.insert(262, "Djibouti");
    m.insert(266, "Gabon");
    m.insert(268, "Georgia");
    m.insert(270, "Gambia");
    m.insert(275, "Palestine");
    m.insert(276, "Germany");
    m.insert(288, "Ghana");
    m.insert(292, "Gibraltar");
    m.insert(296, "Kiribati");
    m.insert(300, "Greece");
    m.insert(304, "Greenland");
    m.insert(308, "Grenada");
    m.insert(312, "Guadeloupe");
    m.insert(316, "Guam");
    m.insert(320, "Guatemala");
    m.insert(324, "Guinea");
    m.insert(328, "Guyana");
    m.insert(332, "Haiti");
    m.insert(334, "Heard Island and McDonald Islands");
    m.insert(336, "Holy See (Vatican City State)");
    m.insert(340, "Honduras");
    m.insert(344, "Hong Kong");
    m.insert(348, "Hungary");
    m.insert(352, "Iceland");
    m.insert(356, "India");
    m.insert(360, "Indonesia");
    m.insert(364, "Iran");
    m.insert(368, "Iraq");
    m.insert(372, "Ireland");
    m.insert(376, "Israel");
    m.insert(380, "Italy");
    m.insert(384, "Côte d'Ivoire");
    m.insert(388, "Jamaica");
    m.insert(392, "Japan");
    m.insert(398, "Kazakhstan");
    m.insert(400, "Jordan");
    m.insert(404, "Kenya");
    m.insert(408, "Korea, Democratic People's Republic of");
    m.insert(410, "Korea, Republic of");
    m.insert(414, "Kuwait");
    m.insert(417, "Kyrgyzstan");
    m.insert(418, "Lao People's Democratic Republic");
    m.insert(422, "Lebanon");
    m.insert(426, "Lesotho");
    m.insert(428, "Latvia");
    m.insert(430, "Liberia");
    m.insert(434, "Libya");
    m.insert(438, "Liechtenstein");
    m.insert(440, "Lithuania");
    m.insert(442, "Luxembourg");
    m.insert(446, "Macao");
    m.insert(450, "Madagascar");
    m.insert(454, "Malawi");
    m.insert(458, "Malaysia");
    m.insert(462, "Maldives");
    m.insert(466, "Mali");
    m.insert(470, "Malta");
    m.insert(474, "Martinique");
    m.insert(478, "Mauritania");
    m.insert(480, "Mauritius");
    m.insert(484, "Mexico");
    m.insert(492, "Monaco");
    m.insert(496, "Mongolia");
    m.insert(498, "Moldova");
    m.insert(499, "Montenegro");
    m.insert(500, "Montserrat");
    m.insert(504, "Morocco");
    m.insert(508, "Mozambique");
    m.insert(512, "Oman");
    m.insert(516, "Namibia");
    m.insert(520, "Nauru");
    m.insert(524, "Nepal");
    m.insert(528, "Netherlands");
    m.insert(540, "New Caledonia");
    m.insert(548, "Vanuatu");
    m.insert(554, "New Zealand");
    m.insert(558, "Nicaragua");
    m.insert(562, "Niger");
    m.insert(566, "Nigeria");
    m.insert(570, "Niue");
    m.insert(574, "Norfolk Island");
    m.insert(578, "Norway");
    m.insert(580, "Northern Mariana Islands");
    m.insert(581, "United States Minor Outlying Islands");
    m.insert(583, "Micronesia");
    m.insert(584, "Marshall Islands");
    m.insert(585, "Palau");
    m.insert(586, "Pakistan");
    m.insert(591, "Panama");
    m.insert(598, "Papua New Guinea");
    m.insert(600, "Paraguay");
    m.insert(604, "Peru");
    m.insert(608, "Philippines");
    m.insert(612, "Pitcairn");
    m.insert(616, "Poland");
    m.insert(620, "Portugal");
    m.insert(624, "Guinea-Bissau");
    m.insert(626, "Timor-Leste");
    m.insert(630, "Puerto Rico");
    m.insert(634, "Qatar");
    m.insert(638, "Réunion");
    m.insert(642, "Romania");
    m.insert(643, "Russian Federation");
    m.insert(646, "Rwanda");
    m.insert(652, "Saint Barthélemy");
    m.insert(654, "Saint Helena");
    m.insert(659, "Saint Kitts and Nevis");
    m.insert(660, "Anguilla");
    m.insert(662, "Saint Lucia");
    m.insert(663, "Saint Martin (French part)");
    m.insert(666, "Saint Pierre and Miquelon");
    m.insert(670, "Saint Vincent and the Grenadines");
    m.insert(674, "San Marino");
    m.insert(678, "Sao Tome and Principe");
    m.insert(682, "Saudi Arabia");
    m.insert(686, "Senegal");
    m.insert(688, "Serbia");
    m.insert(690, "Seychelles");
    m.insert(694, "Sierra Leone");
    m.insert(702, "Singapore");
    m.insert(703, "Slovakia");
    m.insert(704, "Viet Nam");
    m.insert(705, "Slovenia");
    m.insert(706, "Somalia");
    m.insert(710, "South Africa");
    m.insert(716, "Zimbabwe");
    m.insert(724, "Spain");
    m.insert(728, "South Sudan");
    m.insert(729, "Sudan");
    m.insert(732, "Western Sahara");
    m.insert(740, "Suriname");
    m.insert(744, "Svalbard and Jan Mayen");
    m.insert(748, "Swaziland");
    m.insert(752, "Sweden");
    m.insert(756, "Switzerland");
    m.insert(760, "Syrian Arab Republic");
    m.insert(762, "Tajikistan");
    m.insert(764, "Thailand");
    m.insert(768, "Togo");
    m.insert(772, "Tokelau");
    m.insert(776, "Tonga");
    m.insert(780, "Trinidad and Tobago");
    m.insert(784, "United Arab Emirates");
    m.insert(788, "Tunisia");
    m.insert(792, "Turkey");
    m.insert(795, "Turkmenistan");
    m.insert(796, "Turks and Caicos Islands");
    m.insert(798, "Tuvalu");
    m.insert(800, "Uganda");
    m.insert(804, "Ukraine");
    m.insert(807, "North Macedonia");
    m.insert(818, "Egypt");
    m.insert(826, "United Kingdom");
    m.insert(831, "Guernsey");
    m.insert(832, "Jersey");
    m.insert(833, "Isle of Man");
    m.insert(834, "Tanzania");
    m.insert(840, "United States");
    m.insert(850, "Virgin Islands (U.S.)");
    m.insert(854, "Burkina Faso");
    m.insert(858, "Uruguay");
    m.insert(860, "Uzbekistan");
    m.insert(862, "Venezuela");
    m.insert(876, "Wallis and Futuna");
    m.insert(882, "Samoa");
    m.insert(887, "Yemen");
    m.insert(894, "Zambia");
    m
});

/// Validates a TIS numeric code
pub fn is_valid_tis_code(code: u16) -> bool {
    TIS_CODES.contains_key(&code)
}

/// Gets the territory name for a TIS code
pub fn get_territory_name(code: u16) -> Option<&'static str> {
    TIS_CODES.get(&code).copied()
}

/// Gets all valid TIS codes
pub fn get_all_tis_codes() -> Vec<u16> {
    TIS_CODES.keys().copied().collect()
}
